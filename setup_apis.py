#!/usr/bin/env python3
"""
Quick setup script for configuring free APIs in the timeseries automation project.
"""

import os
import sys
from pathlib import Path

def main():
    """Interactive setup for free APIs."""
    print("üöÄ Free API Setup for Timeseries Automation")
    print("=" * 50)
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    print("\nüìã Let's set up your free APIs step by step:")
    print("   (Press Enter to skip any optional API)\n")
    
    # OpenWeather API (Required)
    print("1Ô∏è‚É£  OpenWeather API (Required for weather data)")
    print("   ‚Ä¢ Go to: https://openweathermap.org/api")
    print("   ‚Ä¢ Sign up for free (1,000 calls/day)")
    print("   ‚Ä¢ Get your API key")
    
    openweather_key = input("\n   Enter your OpenWeather API key: ").strip()
    
    if not openweather_key:
        print("   ‚ö†Ô∏è  No OpenWeather key provided. System will use synthetic weather data.")
    
    # EIA API (Optional)
    print("\n2Ô∏è‚É£  EIA Energy API (Optional for real energy data)")
    print("   ‚Ä¢ Go to: https://www.eia.gov/opendata/register.php")
    print("   ‚Ä¢ Register for free (unlimited calls)")
    print("   ‚Ä¢ Get your API key")
    
    eia_key = input("\n   Enter your EIA API key (or press Enter to skip): ").strip()
    
    # Slack (Optional)
    print("\n3Ô∏è‚É£  Slack Integration (Optional for notifications)")
    print("   ‚Ä¢ Go to: https://api.slack.com/apps")
    print("   ‚Ä¢ Create a new app")
    print("   ‚Ä¢ Add bot token scopes: chat:write, files:write")
    print("   ‚Ä¢ Install to workspace")
    
    slack_token = input("\n   Enter your Slack bot token (or press Enter to skip): ").strip()
    slack_channel = "#energy-forecast"
    
    if slack_token:
        channel_input = input(f"   Enter Slack channel (default: {slack_channel}): ").strip()
        if channel_input:
            slack_channel = channel_input
    
    # Create .env file
    env_content = f"""# Timeseries Automation - Free API Configuration
# Generated by setup script on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Weather API (Required)
OPENWEATHER_API_KEY={openweather_key}

# Energy API (Optional - uses synthetic data if empty)
EIA_API_KEY={eia_key}

# Database (Local SQLite)
DATABASE_URL=sqlite:///data/timeseries.db

# Slack Integration (Optional)
SLACK_TOKEN={slack_token}
SLACK_CHANNEL={slack_channel}

# Optional integrations (add your tokens if needed)
NOTION_TOKEN=
NOTION_DATABASE_ID=
GITHUB_TOKEN=
GITHUB_REPO=
GITHUB_BRANCH=main
GITHUB_COMMITTER_NAME=Automation Agent
GITHUB_COMMITTER_EMAIL=automation@example.com
"""
    
    # Write .env file
    with open(".env", "w") as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Configuration saved to .env file!")
    
    # Test the setup
    print("\nüß™ Testing your configuration...")
    
    if openweather_key:
        print("   ‚úÖ OpenWeather API key configured")
    else:
        print("   ‚ö†Ô∏è  OpenWeather API key missing - will use synthetic weather data")
    
    if eia_key:
        print("   ‚úÖ EIA API key configured")
    else:
        print("   ‚ö†Ô∏è  EIA API key missing - will use synthetic energy data")
    
    if slack_token:
        print("   ‚úÖ Slack integration configured")
    else:
        print("   ‚ÑπÔ∏è  Slack integration not configured - will log to console")
    
    print(f"\nüéâ Setup complete! You can now run:")
    print(f"   python -m src.pipeline")
    print(f"   streamlit run streamlit_app.py")
    
    # Offer to run a test
    test_run = input(f"\nWould you like to run a test forecast now? (Y/n): ").strip().lower()
    if test_run != 'n':
        print(f"\nüî¨ Running test forecast...")
        os.system("python -m src.pipeline")

if __name__ == "__main__":
    from datetime import datetime
    main()